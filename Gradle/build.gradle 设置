1. 多渠道打包
比如友盟渠道设置，在AndroidManifest.xml里面会有这么一段：
<meta-data
    android:name="UMENG_CHANNEL"
    android:value="Channel_ID" />
里面的Channel_ID就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。

1） 在AndroidManifest.xml里配置PlaceHolder
<meta-data
    android:name="UMENG_CHANNEL"
    android:value="${UMENG_CHANNEL_VALUE}" />
    
2）在build.gradle设置productFlavors
android {  
    productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        _360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "_360"]
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
    }  
}
或者批量修改
android {  
    productFlavors {
        xiaomi {}
        _360 {}
        baidu {}
        wandoujia {}
    }  

    productFlavors.all { 
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] 
    }
}

2.打包生成的apk名字
android {  
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (null != outputFile && outputFile.name.endsWith(".apk")) {
                File outputDir = new File(outputFile.parent)
                if ("debug" != variant.buildType.name) {
                    def fileName = "TEST_${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}_${variant.buildType.name}.apk"
                    output.outputFile = new File(outputDir, fileName)
                }
            }
        }
    }
}
def packageTime() {
    return new Date().format("yyyyMMddHHmm")
}
